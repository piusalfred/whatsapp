// Code generated by MockGen. DO NOT EDIT.
// Source: webhooks.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/webhooks/mock_webhooks.go -package=webhooks -source=webhooks.go
//

// Package webhooks is a generated GoMock package.
package webhooks

import (
	context "context"
	reflect "reflect"

	webhooks "github.com/piusalfred/whatsapp/webhooks"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationHandler is a mock of NotificationHandler interface.
type MockNotificationHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationHandlerMockRecorder
	isgomock struct{}
}

// MockNotificationHandlerMockRecorder is the mock recorder for MockNotificationHandler.
type MockNotificationHandlerMockRecorder struct {
	mock *MockNotificationHandler
}

// NewMockNotificationHandler creates a new mock instance.
func NewMockNotificationHandler(ctrl *gomock.Controller) *MockNotificationHandler {
	mock := &MockNotificationHandler{ctrl: ctrl}
	mock.recorder = &MockNotificationHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationHandler) EXPECT() *MockNotificationHandlerMockRecorder {
	return m.recorder
}

// HandleNotification mocks base method.
func (m *MockNotificationHandler) HandleNotification(ctx context.Context, notification *webhooks.Notification) *webhooks.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNotification", ctx, notification)
	ret0, _ := ret[0].(*webhooks.Response)
	return ret0
}

// HandleNotification indicates an expected call of HandleNotification.
func (mr *MockNotificationHandlerMockRecorder) HandleNotification(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNotification", reflect.TypeOf((*MockNotificationHandler)(nil).HandleNotification), ctx, notification)
}
