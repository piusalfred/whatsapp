// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/webhooks/mock_webhooks_handlers.go -package=webhooks -source=handler.go
//

// Package webhooks is a generated GoMock package.
package webhooks

import (
	context "context"
	reflect "reflect"

	errors "github.com/piusalfred/whatsapp/pkg/errors"
	webhooks "github.com/piusalfred/whatsapp/webhooks"
	gomock "go.uber.org/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler[S any, T any] struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder[S, T]
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder[S any, T any] struct {
	mock *MockEventHandler[S, T]
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler[S any, T any](ctrl *gomock.Controller) *MockEventHandler[S, T] {
	mock := &MockEventHandler[S, T]{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder[S, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler[S, T]) EXPECT() *MockEventHandlerMockRecorder[S, T] {
	return m.recorder
}

// HandleEvent mocks base method.
func (m *MockEventHandler[S, T]) HandleEvent(ctx context.Context, ntx *S, notification *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", ctx, ntx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockEventHandlerMockRecorder[S, T]) HandleEvent(ctx, ntx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockEventHandler[S, T])(nil).HandleEvent), ctx, ntx, notification)
}

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder[T]
	isgomock struct{}
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder[T any] struct {
	mock *MockMessageHandler[T]
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler[T any](ctrl *gomock.Controller) *MockMessageHandler[T] {
	mock := &MockMessageHandler[T]{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler[T]) EXPECT() *MockMessageHandlerMockRecorder[T] {
	return m.recorder
}

// Handle mocks base method.
func (m *MockMessageHandler[T]) Handle(ctx context.Context, nctx *webhooks.MessageNotificationContext, mctx *webhooks.MessageInfo, message *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, nctx, mctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockMessageHandlerMockRecorder[T]) Handle(ctx, nctx, mctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMessageHandler[T])(nil).Handle), ctx, nctx, mctx, message)
}

// MockMessageChangeValueHandler is a mock of MessageChangeValueHandler interface.
type MockMessageChangeValueHandler[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockMessageChangeValueHandlerMockRecorder[T]
	isgomock struct{}
}

// MockMessageChangeValueHandlerMockRecorder is the mock recorder for MockMessageChangeValueHandler.
type MockMessageChangeValueHandlerMockRecorder[T any] struct {
	mock *MockMessageChangeValueHandler[T]
}

// NewMockMessageChangeValueHandler creates a new mock instance.
func NewMockMessageChangeValueHandler[T any](ctrl *gomock.Controller) *MockMessageChangeValueHandler[T] {
	mock := &MockMessageChangeValueHandler[T]{ctrl: ctrl}
	mock.recorder = &MockMessageChangeValueHandlerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageChangeValueHandler[T]) EXPECT() *MockMessageChangeValueHandlerMockRecorder[T] {
	return m.recorder
}

// Handle mocks base method.
func (m *MockMessageChangeValueHandler[T]) Handle(ctx context.Context, nctx *webhooks.MessageNotificationContext, value []*T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, nctx, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockMessageChangeValueHandlerMockRecorder[T]) Handle(ctx, nctx, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMessageChangeValueHandler[T])(nil).Handle), ctx, nctx, value)
}

// MockMessageErrorsHandler is a mock of MessageErrorsHandler interface.
type MockMessageErrorsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageErrorsHandlerMockRecorder
	isgomock struct{}
}

// MockMessageErrorsHandlerMockRecorder is the mock recorder for MockMessageErrorsHandler.
type MockMessageErrorsHandlerMockRecorder struct {
	mock *MockMessageErrorsHandler
}

// NewMockMessageErrorsHandler creates a new mock instance.
func NewMockMessageErrorsHandler(ctrl *gomock.Controller) *MockMessageErrorsHandler {
	mock := &MockMessageErrorsHandler{ctrl: ctrl}
	mock.recorder = &MockMessageErrorsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageErrorsHandler) EXPECT() *MockMessageErrorsHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockMessageErrorsHandler) Handle(ctx context.Context, nctx *webhooks.MessageNotificationContext, mctx *webhooks.MessageInfo, arg3 []*errors.Error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, nctx, mctx, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockMessageErrorsHandlerMockRecorder) Handle(ctx, nctx, mctx, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMessageErrorsHandler)(nil).Handle), ctx, nctx, mctx, arg3)
}
