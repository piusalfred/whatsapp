// Code generated by MockGen. DO NOT EDIT.
// Source: templates.go
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/business/analytics/mock_templates.go -package=analytics -source=templates.go
//

// Package analytics is a generated GoMock package.
package analytics

import (
	context "context"
	reflect "reflect"

	analytics "github.com/piusalfred/whatsapp/business/analytics"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplatesAnalytics is a mock of TemplatesAnalytics interface.
type MockTemplatesAnalytics struct {
	ctrl     *gomock.Controller
	recorder *MockTemplatesAnalyticsMockRecorder
}

// MockTemplatesAnalyticsMockRecorder is the mock recorder for MockTemplatesAnalytics.
type MockTemplatesAnalyticsMockRecorder struct {
	mock *MockTemplatesAnalytics
}

// NewMockTemplatesAnalytics creates a new mock instance.
func NewMockTemplatesAnalytics(ctrl *gomock.Controller) *MockTemplatesAnalytics {
	mock := &MockTemplatesAnalytics{ctrl: ctrl}
	mock.recorder = &MockTemplatesAnalyticsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplatesAnalytics) EXPECT() *MockTemplatesAnalyticsMockRecorder {
	return m.recorder
}

// DisableButtonClickTracking mocks base method.
func (m *MockTemplatesAnalytics) DisableButtonClickTracking(ctx context.Context, req *analytics.DisableButtonClickTrackingRequest) (*analytics.DisableButtonClickTrackingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableButtonClickTracking", ctx, req)
	ret0, _ := ret[0].(*analytics.DisableButtonClickTrackingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableButtonClickTracking indicates an expected call of DisableButtonClickTracking.
func (mr *MockTemplatesAnalyticsMockRecorder) DisableButtonClickTracking(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableButtonClickTracking", reflect.TypeOf((*MockTemplatesAnalytics)(nil).DisableButtonClickTracking), ctx, req)
}

// Enable mocks base method.
func (m *MockTemplatesAnalytics) Enable(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockTemplatesAnalyticsMockRecorder) Enable(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockTemplatesAnalytics)(nil).Enable), ctx)
}

// Fetch mocks base method.
func (m *MockTemplatesAnalytics) Fetch(ctx context.Context, params *analytics.TemplateAnalyticsRequest) (*analytics.TemplateAnalyticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, params)
	ret0, _ := ret[0].(*analytics.TemplateAnalyticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockTemplatesAnalyticsMockRecorder) Fetch(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockTemplatesAnalytics)(nil).Fetch), ctx, params)
}
