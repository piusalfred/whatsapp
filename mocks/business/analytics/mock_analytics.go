// Code generated by MockGen. DO NOT EDIT.
// Source: analytics.go
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/business/analytics/mock_analytics.go -package=analytics -source=analytics.go
//

// Package analytics is a generated GoMock package.
package analytics

import (
	context "context"
	reflect "reflect"

	analytics "github.com/piusalfred/whatsapp/business/analytics"
	gomock "go.uber.org/mock/gomock"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
	isgomock struct{}
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// FetchAnalytics mocks base method.
func (m *MockFetcher) FetchAnalytics(ctx context.Context, request *analytics.Request) (*analytics.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAnalytics", ctx, request)
	ret0, _ := ret[0].(*analytics.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAnalytics indicates an expected call of FetchAnalytics.
func (mr *MockFetcherMockRecorder) FetchAnalytics(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAnalytics", reflect.TypeOf((*MockFetcher)(nil).FetchAnalytics), ctx, request)
}
