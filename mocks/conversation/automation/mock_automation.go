// Code generated by MockGen. DO NOT EDIT.
// Source: automation.go
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/conversation/automation/mock_automation.go -package=automation -source=automation.go
//

// Package automation is a generated GoMock package.
package automation

import (
	context "context"
	reflect "reflect"

	automation "github.com/piusalfred/whatsapp/conversation/automation"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddComponents mocks base method.
func (m *MockService) AddComponents(ctx context.Context, commands []*automation.Command, prompts []string) (*automation.SuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComponents", ctx, commands, prompts)
	ret0, _ := ret[0].(*automation.SuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComponents indicates an expected call of AddComponents.
func (mr *MockServiceMockRecorder) AddComponents(ctx, commands, prompts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComponents", reflect.TypeOf((*MockService)(nil).AddComponents), ctx, commands, prompts)
}

// ListComponents mocks base method.
func (m *MockService) ListComponents(ctx context.Context) (*automation.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponents", ctx)
	ret0, _ := ret[0].(*automation.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComponents indicates an expected call of ListComponents.
func (mr *MockServiceMockRecorder) ListComponents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponents", reflect.TypeOf((*MockService)(nil).ListComponents), ctx)
}

// UpdateWelcomeMessageStatus mocks base method.
func (m *MockService) UpdateWelcomeMessageStatus(ctx context.Context, shouldEnable bool) (*automation.SuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWelcomeMessageStatus", ctx, shouldEnable)
	ret0, _ := ret[0].(*automation.SuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWelcomeMessageStatus indicates an expected call of UpdateWelcomeMessageStatus.
func (mr *MockServiceMockRecorder) UpdateWelcomeMessageStatus(ctx, shouldEnable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWelcomeMessageStatus", reflect.TypeOf((*MockService)(nil).UpdateWelcomeMessageStatus), ctx, shouldEnable)
}
