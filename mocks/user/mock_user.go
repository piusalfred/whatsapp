// Code generated by MockGen. DO NOT EDIT.
// Source: ./user/user.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/user/mock_user.go -package=user -source=./user/user.go
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	user "github.com/piusalfred/whatsapp/user"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockService is a mock of BlockService interface.
type MockBlockService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockServiceMockRecorder
	isgomock struct{}
}

// MockBlockServiceMockRecorder is the mock recorder for MockBlockService.
type MockBlockServiceMockRecorder struct {
	mock *MockBlockService
}

// NewMockBlockService creates a new mock instance.
func NewMockBlockService(ctrl *gomock.Controller) *MockBlockService {
	mock := &MockBlockService{ctrl: ctrl}
	mock.recorder = &MockBlockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockService) EXPECT() *MockBlockServiceMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockBlockService) Block(ctx context.Context, numbers []string) (*user.BlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", ctx, numbers)
	ret0, _ := ret[0].(*user.BlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockBlockServiceMockRecorder) Block(ctx, numbers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockBlockService)(nil).Block), ctx, numbers)
}

// ListBlocked mocks base method.
func (m *MockBlockService) ListBlocked(ctx context.Context, request *user.ListBlockedUsersOptions) (*user.ListBlockedUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlocked", ctx, request)
	ret0, _ := ret[0].(*user.ListBlockedUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlocked indicates an expected call of ListBlocked.
func (mr *MockBlockServiceMockRecorder) ListBlocked(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlocked", reflect.TypeOf((*MockBlockService)(nil).ListBlocked), ctx, request)
}

// Unblock mocks base method.
func (m *MockBlockService) Unblock(ctx context.Context, numbers []string) (*user.BlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unblock", ctx, numbers)
	ret0, _ := ret[0].(*user.BlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unblock indicates an expected call of Unblock.
func (mr *MockBlockServiceMockRecorder) Unblock(ctx, numbers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unblock", reflect.TypeOf((*MockBlockService)(nil).Unblock), ctx, numbers)
}
