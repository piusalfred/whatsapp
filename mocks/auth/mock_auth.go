// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/auth/mock_auth.go -package=auth -source=auth.go
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	auth "github.com/piusalfred/whatsapp/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenRotator is a mock of TokenRotator interface.
type MockTokenRotator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRotatorMockRecorder
}

// MockTokenRotatorMockRecorder is the mock recorder for MockTokenRotator.
type MockTokenRotatorMockRecorder struct {
	mock *MockTokenRotator
}

// NewMockTokenRotator creates a new mock instance.
func NewMockTokenRotator(ctrl *gomock.Controller) *MockTokenRotator {
	mock := &MockTokenRotator{ctrl: ctrl}
	mock.recorder = &MockTokenRotatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRotator) EXPECT() *MockTokenRotatorMockRecorder {
	return m.recorder
}

// RotateToken mocks base method.
func (m *MockTokenRotator) RotateToken(ctx context.Context, refresher auth.TokenRefresher, revoker auth.TokenRevoker, store auth.TokenStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateToken", ctx, refresher, revoker, store)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateToken indicates an expected call of RotateToken.
func (mr *MockTokenRotatorMockRecorder) RotateToken(ctx, refresher, revoker, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateToken", reflect.TypeOf((*MockTokenRotator)(nil).RotateToken), ctx, refresher, revoker, store)
}

// MockTokenRefresher is a mock of TokenRefresher interface.
type MockTokenRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRefresherMockRecorder
}

// MockTokenRefresherMockRecorder is the mock recorder for MockTokenRefresher.
type MockTokenRefresherMockRecorder struct {
	mock *MockTokenRefresher
}

// NewMockTokenRefresher creates a new mock instance.
func NewMockTokenRefresher(ctrl *gomock.Controller) *MockTokenRefresher {
	mock := &MockTokenRefresher{ctrl: ctrl}
	mock.recorder = &MockTokenRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRefresher) EXPECT() *MockTokenRefresherMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockTokenRefresher) Refresh(ctx context.Context, currentToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, currentToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockTokenRefresherMockRecorder) Refresh(ctx, currentToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockTokenRefresher)(nil).Refresh), ctx, currentToken)
}

// MockTokenRevoker is a mock of TokenRevoker interface.
type MockTokenRevoker struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRevokerMockRecorder
}

// MockTokenRevokerMockRecorder is the mock recorder for MockTokenRevoker.
type MockTokenRevokerMockRecorder struct {
	mock *MockTokenRevoker
}

// NewMockTokenRevoker creates a new mock instance.
func NewMockTokenRevoker(ctrl *gomock.Controller) *MockTokenRevoker {
	mock := &MockTokenRevoker{ctrl: ctrl}
	mock.recorder = &MockTokenRevokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRevoker) EXPECT() *MockTokenRevokerMockRecorder {
	return m.recorder
}

// Revoke mocks base method.
func (m *MockTokenRevoker) Revoke(ctx context.Context, oldToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, oldToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockTokenRevokerMockRecorder) Revoke(ctx, oldToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockTokenRevoker)(nil).Revoke), ctx, oldToken)
}

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTokenStore) Add(ctx context.Context, newToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, newToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTokenStoreMockRecorder) Add(ctx, newToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTokenStore)(nil).Add), ctx, newToken)
}

// Get mocks base method.
func (m *MockTokenStore) Get(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenStoreMockRecorder) Get(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenStore)(nil).Get), ctx)
}
