// Code generated by MockGen. DO NOT EDIT.
// Source: flow.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/flow/mock_flow.go -package=flow -source=flow.go
//

// Package flow is a generated GoMock package.
package flow

import (
	context "context"
	reflect "reflect"

	config "github.com/piusalfred/whatsapp/config"
	flow "github.com/piusalfred/whatsapp/flow"
	gomock "go.uber.org/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
	isgomock struct{}
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSender) Send(ctx context.Context, conf *config.Config, req *flow.BaseRequest) (*flow.BaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, conf, req)
	ret0, _ := ret[0].(*flow.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(ctx, conf, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), ctx, conf, req)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, request flow.CreateRequest) (*flow.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(*flow.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, request)
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, id string) (*flow.SuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*flow.SuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, id)
}

// Deprecate mocks base method.
func (m *MockService) Deprecate(ctx context.Context, id string) (*flow.SuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deprecate", ctx, id)
	ret0, _ := ret[0].(*flow.SuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deprecate indicates an expected call of Deprecate.
func (mr *MockServiceMockRecorder) Deprecate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deprecate", reflect.TypeOf((*MockService)(nil).Deprecate), ctx, id)
}

// GeneratePreview mocks base method.
func (m *MockService) GeneratePreview(ctx context.Context, request *flow.PreviewRequest) (*flow.PreviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePreview", ctx, request)
	ret0, _ := ret[0].(*flow.PreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePreview indicates an expected call of GeneratePreview.
func (mr *MockServiceMockRecorder) GeneratePreview(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePreview", reflect.TypeOf((*MockService)(nil).GeneratePreview), ctx, request)
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, request *flow.GetRequest) (*flow.SingleFlowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(*flow.SingleFlowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, request)
}

// GetFlowMetrics mocks base method.
func (m *MockService) GetFlowMetrics(ctx context.Context, request *flow.MetricsRequest) (*flow.MetricsAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowMetrics", ctx, request)
	ret0, _ := ret[0].(*flow.MetricsAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowMetrics indicates an expected call of GetFlowMetrics.
func (mr *MockServiceMockRecorder) GetFlowMetrics(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowMetrics", reflect.TypeOf((*MockService)(nil).GetFlowMetrics), ctx, request)
}

// ListAll mocks base method.
func (m *MockService) ListAll(ctx context.Context) (*flow.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].(*flow.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockServiceMockRecorder) ListAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockService)(nil).ListAll), ctx)
}

// ListAssets mocks base method.
func (m *MockService) ListAssets(ctx context.Context, id string) (*flow.RetrieveAssetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssets", ctx, id)
	ret0, _ := ret[0].(*flow.RetrieveAssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssets indicates an expected call of ListAssets.
func (mr *MockServiceMockRecorder) ListAssets(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssets", reflect.TypeOf((*MockService)(nil).ListAssets), ctx, id)
}

// Publish mocks base method.
func (m *MockService) Publish(ctx context.Context, id string) (*flow.SuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, id)
	ret0, _ := ret[0].(*flow.SuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockServiceMockRecorder) Publish(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockService)(nil).Publish), ctx, id)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, id string, request flow.UpdateRequest) (*flow.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, request)
	ret0, _ := ret[0].(*flow.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, id, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, id, request)
}

// UpdateFlowJSON mocks base method.
func (m *MockService) UpdateFlowJSON(ctx context.Context, request *flow.UpdateFlowJSONRequest) (*flow.UpdateFlowJSONResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowJSON", ctx, request)
	ret0, _ := ret[0].(*flow.UpdateFlowJSONResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowJSON indicates an expected call of UpdateFlowJSON.
func (mr *MockServiceMockRecorder) UpdateFlowJSON(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowJSON", reflect.TypeOf((*MockService)(nil).UpdateFlowJSON), ctx, request)
}

// MockDataExchangeHandler is a mock of DataExchangeHandler interface.
type MockDataExchangeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDataExchangeHandlerMockRecorder
	isgomock struct{}
}

// MockDataExchangeHandlerMockRecorder is the mock recorder for MockDataExchangeHandler.
type MockDataExchangeHandlerMockRecorder struct {
	mock *MockDataExchangeHandler
}

// NewMockDataExchangeHandler creates a new mock instance.
func NewMockDataExchangeHandler(ctrl *gomock.Controller) *MockDataExchangeHandler {
	mock := &MockDataExchangeHandler{ctrl: ctrl}
	mock.recorder = &MockDataExchangeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataExchangeHandler) EXPECT() *MockDataExchangeHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockDataExchangeHandler) Handle(ctx context.Context, request *flow.DataExchangeRequest) (*flow.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, request)
	ret0, _ := ret[0].(*flow.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockDataExchangeHandlerMockRecorder) Handle(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDataExchangeHandler)(nil).Handle), ctx, request)
}
