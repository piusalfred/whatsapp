name: build and release

env:
    GO_VERSION: "1.25"

on:
    push:
        branches:
            - main
    pull_request:

permissions:
    contents: write
    pull-requests: write
    packages: read

jobs:
    changes:
        runs-on: ubuntu-latest
        outputs:
            lib: ${{ steps.filter.outputs.lib }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Filter paths (Go + go.mod/go.sum only)
              id: filter
              uses: dorny/paths-filter@v3
              with:
                  filters: |
                      lib:
                        - '**/*.go'
                        - '**/go.mod'
                        - '**/go.sum'
                        - '!_examples/**'
                        - '!extras/**'
                        - '!.github/**'
            - name: Log change status
              run: |
                  if [ "${{ steps.filter.outputs.lib }}" = "true" ]; then
                      echo "âœ… Changes detected in library files. Version should be updated."
                  else
                      echo "ðŸŸ¡ No library changes. Skipping version update."
                  fi

    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest]
                arch: [amd64, arm64]
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ">=1.25.0"

            - name: Cache Go build
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-${{ env.GO_VERSION }}-

            - name: Tidy + download
              run: |
                  go mod tidy
                  go mod download

            - name: Run tests (race)
              run: |
                  go test -v -race ./...
                  go build -race ./...

            - name: Lint (golangci-lint)
              uses: golangci/golangci-lint-action@v7
              with:
                  version: v2.4.0
    release:
        needs: [build, changes]
        if: >
            github.event_name == 'push' &&
            github.ref == 'refs/heads/main' &&
            needs.changes.outputs.lib == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout (full history for tags)
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Auto-tag with version
              id: tagger
              uses: phish108/autotag-action@v1.1.55
              with:
                  with-v: true
                  github-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Verify tag creation
              run: |
                  if [ -z "${{ steps.tagger.outputs.new-tag }}" ]; then
                    echo "Error: No tag was created. Exiting."
                    exit 1
                  fi

            - name: Create GitHub Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAG: ${{ steps.tagger.outputs.new-tag }}
              run: |
                  gh release create "${TAG}" \
                    --repo="$GITHUB_REPOSITORY" \
                    --title="${TAG#v}" \
                    --generate-notes
